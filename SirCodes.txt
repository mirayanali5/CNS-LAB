Caesar Cipher-

program-

import java.util.Scanner;

public class CaesarCipher {
    public static void main(String[] args) {
        char[] alpha = {
            'A','B','C','D','E','F','G','H','I','J','K','L',
            'M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
        };
        
        char[] original = {'H','E','L','L','O','W','O','R','L','D'};
        char[] encrypted = new char[original.length];
        char[] decrypted = new char[original.length];
        
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a key value:\n");
        int key = sc.nextInt();
        
        // --- Encryption ---
        for (int j = 0; j < original.length; j++) {
            for (int i = 0; i < alpha.length; i++) {
                if (original[j] == alpha[i]) {
                    int newIndex = (i + key) % 26;
                    encrypted[j] = alpha[newIndex];
                    break;
                }
            }
        }
        
        System.out.println("Encrypted: " + new String(encrypted));
        
        // --- Decryption ---
        for (int j = 0; j < encrypted.length; j++) {
            for (int i = 0; i < alpha.length; i++) {
                if (encrypted[j] == alpha[i]) {
                    int newIndex = (i - key + 26) % 26; // add 26 to avoid negative index
                    decrypted[j] = alpha[newIndex];
                    break;
                }
            }
        }
        
        System.out.println("Decrypted: " + new String(decrypted));
        
        sc.close();
    }
}

output-
Enter a key value:
3
Encrypted: KHOORZRUOG
Decrypted: HELLOWORLD

Substitution Cipher-

program-

import java.util.Scanner;

public class SubstitutionCipher {
    public static void main(String[] args) {
        char[] alpha = {
            'A','B','C','D','E','F','G','H','I','J','K','L',
            'M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
        };
        
        char[] original = {'H','E','L','L','O','W','O','R','L','D'};
        char[] encrypted = new char[original.length];
        char[] decrypted = new char[original.length];
        
        char[] key = {
            'Q','W','E','R','T','Y','U','I','O','P',
            'A','S','D','F','G','H','J','K','L','Z',
            'X','C','V','B','N','M'
        };
        
        // --- Encryption ---
        for (int j = 0; j < original.length; j++) {
            for (int i = 0; i < alpha.length; i++) {
                if (original[j] == alpha[i]) {
                    encrypted[j] = key[i];
                    break;
                }
            }
        }
        
        System.out.println("Encrypted: " + new String(encrypted));
        
        // --- Decryption ---
        for (int j = 0; j < encrypted.length; j++) {
            for (int i = 0; i < key.length; i++) {
                if (encrypted[j] == key[i]) {
                    decrypted[j] = alpha[i];
                    break;
                }
            }
        }
        
        System.out.println("Decrypted: " + new String(decrypted));
    }
}

output-
Encrypted: ITSSGVGKSR
Decrypted: HELLOWORLD

Hill Cipher-

program-

import java.util.*;
public class HillCipher {
static int determinant(int[][] m){
int det = (m[0][0]*m[1][1]-m[0][1]*m[1][0])%26;
if(det<0) det += 26;
return det;
}
static int modInverse(int det){
for(int i=1;i<26;i++){
if((det*i)%26==1) return i;
}
return -1;
}
static int[][] adjoint(int[][] m){
int[][] adj = new int[2][2];
adj[0][0] = m[1][1];
adj[0][1] =-m[0][1];
adj[1][0] =-m[1][0];
adj[1][1] = m[0][0];
return adj;
}
static int[] multiply(int[][] m,int[] v){
int[] result=new int[2];
for(int i=0;i<2;i++){
result[i]=(m[i][0]*v[0] + m[i][1]*v[1])%26;
if(result[i]<0) result[i]+=26;
}
return result;
}
public static void main(String[] args){
Scanner sc=new Scanner(System.in);
int[][] key=new int[2][2];
System.out.println("Enter 2x2 key matrix (must be invertible mod 26):");
for(int i=0;i<2;i++){
for(int j=0;j<2;j++){
key[i][j] = sc.nextInt();
}
}
sc.nextLine();
System.out.print("Enter plain text(2 letters, lowercase):");
String word = sc.nextLine().toLowerCase();
if(word.length()!=2){
System.out.println("Plaintext must be exactly 2 characters!");
return;
}
int[] textVec = new int[2];
for(int i=0;i<2;i++){
textVec[i] = word.charAt(i)-'a';
}
int[] encryptedVec=multiply(key, textVec);
StringBuilder encrypted = new StringBuilder();
for(int val:encryptedVec) encrypted.append((char)(val+'a'));
System.out.println("Encrypted Text:"+encrypted);

int det=determinant(key);
int invDet = modInverse(det);
if(invDet == -1){
System.out.println("Key is not invertible. Decryption not possible.");
return;
}
int[][] adj = adjoint(key);
int[][] invKey = new int[2][2];
for(int i=0;i<2;i++){
for(int j=0;j<2;j++){
int val=adj[i][j] * invDet;
val%=26;
if(val<0) val+=26;
invKey[i][j]=val;
}
}
int[] decryptedVec = multiply(invKey, encryptedVec);
StringBuilder decrypted = new StringBuilder();
for(int val:decryptedVec) decrypted.append((char)(val+'a'));
System.out.println("Decrypted Text:"+decrypted);
sc.close();
}
}

output-
Enter 2x2 key matrix (must be invertible mod 26):
3 3
2 5
Enter plain text(2 letters, lowercase):hi
Encrypted Text:tc
Decrypted Text:hi

DES(Data Encryption Standard)-

program-

import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class DES{
public static void main(String[] args) throws Exception{
Scanner sc = new Scanner(System.in);
System.out.print("Enter message to encrypt:");
String msg = sc.nextLine();
byte[] message = msg.getBytes();

System.out.println("Enter custom key:");
String key = sc.nextLine();
byte[] keyData = key.getBytes();
DESKeySpec secretKey = new DESKeySpec(keyData);
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
SecretKey keyN = keyFactory.generateSecret(secretKey);

Cipher cipher = Cipher.getInstance("DES");
cipher.init(Cipher.ENCRYPT_MODE, keyN);
byte[] encrypted = cipher.doFinal(message);

cipher.init(Cipher.DECRYPT_MODE,keyN);
byte[] decrypted = cipher.doFinal(encrypted);
String decryptedMsg = new String(decrypted);

System.out.println("Message:" + msg);
System.out.println("Encrypyted:" + encrypted);
System.out.println("Decrypted:" + decryptedMsg);
}
}

output-
Enter message to encrypt:HELLOWORLD
Enter custom key:
MYSECRET
Message:HELLOWORLD
Encrypyted:[B@5e265ba4
Decrypted:HELLOWORLD

